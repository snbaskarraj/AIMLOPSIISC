
+++++++++++++++++++++++++++++++++++++++++++++++++++++++
Error While Running Main.py

C:\Users\Riyansh\Downloads\IITM_Course\IOT_Project\C03-Project-01-Simple-Smart-Home\Soluiton\venv\Scripts\python.exe C:/Users/Riyansh/Downloads/IITM_Course/IOT_Project/C03-Project-01-Simple-Smart-Home/Soluiton/main.py
Smart Home Simulation started.

*********************
Intitate the device creation and registration process.

Creating the Light devices for their respective rooms.
Traceback (most recent call last):
File "C:\Users\Riyansh\Downloads\IITM_Course\IOT_Project\C03-Project-01-Simple-Smart-Home\Soluiton\main.py", line 21, in <module>
light_device_1 = Light_Device("light_1", "Kitchen")
File "C:\Users\Riyansh\Downloads\IITM_Course\IOT_Project\C03-Project-01-Simple-Smart-Home\Soluiton\LightDevice.py", line 24, in _init_
self.client.on_disconnect = self._on_disconnect
AttributeError: 'Light_Device' object has no attribute '_on_disconnect'

Process finished with exit code 1

+++++++++++++++++++++++++++++++++++++++++++++++++++++++

 

I have copied allthe codes in the below section .

Thanks in advance.

 

###########################Main.py  - Start######################
import time
from EdgeServer import Edge_Server
from LightDevice import Light_Device
from ACDevice import AC_Device

WAIT_TIME = 0.25  

print("Smart Home Simulation started.")
# Creating the edge-server for the communication with the user

def callback(n):
print("Main: ", n)

edge_server_1 = Edge_Server('edge_server_1',callback)
time.sleep(WAIT_TIME)

# Creating the light_device
print("\n***********************" )
print("Intitate the device creation and registration process. \n" )
print("Creating the Light devices for their respective rooms.")
light_device_1 = Light_Device("light_1", "Kitchen")
time.sleep(WAIT_TIME)  
light_device_2 = Light_Device("light_2", "Kitchen")
time.sleep(WAIT_TIME)  

# Creating the ac_device  
print("\n***********************" )
print("Creating the AC devices for their respective rooms. ")
ac_device_1 = AC_Device("ac_1", "BR1")
ac_device_2 = AC_Device("ac_2", "Kitchen")
time.sleep(WAIT_TIME)  

print("\n***********************" )
print("Get status of all devices.")
edge_server_1.get_status("all")
time.sleep(WAIT_TIME)

print("\n***********************" )
print("Updating light_1 light_intensity to HIGH.")
edge_server_1.set("light_1","light_intensity","HIGH")
time.sleep(WAIT_TIME)  

print("\n***********************" )
print("Get status of all lights.")
edge_server_1.get_status("LIGHT")
time.sleep(WAIT_TIME)

print("\n***********************" )
print("Updating Ac_1 temperature to 18")
edge_server_1.set("ac_1","temperature",18)
time.sleep(WAIT_TIME)  


print("\n***********************" )
print("Update switch status to ON for everything in Kitchen.")
edge_server_1.set("Kitchen",'switch_state','ON')
time.sleep(WAIT_TIME)

print("\n***********************" )
print("Get status of all devices.")
edge_server_1.get_status("all")
time.sleep(WAIT_TIME)

print("\n***********************" )
print("Get status of devices in kitchen.")
edge_server_1.get_status("Kitchen")
time.sleep(WAIT_TIME)

print("\n***********************" )
print("Get status of devices in BR1.")
edge_server_1.get_status("BR1")
time.sleep(WAIT_TIME)

print("\n***********************" )
print("Get status of all AC.")
edge_server_1.get_status("AC")
time.sleep(WAIT_TIME)

print("\n***********************" )
print("Smart Home Simulation stopped.")
edge_server_1.terminate()

###########################Main.py - End ######################

###########################LightDevice.py - Start ####################
import json
import paho.mqtt.client as mqtt
import paho.mqtt.publish as publish

HOST = "localhost"
PORT = 1883


class Light_Device():

# setting up the intensity choices for Smart Light Bulb
_INTENSITY = ["LOW", "HIGH", "MEDIUM", "OFF"]

def _init_(self, device_id, room):
   # Assigning device level information for each of the devices.
   self._device_id = device_id
   self._room_type = room
   self._light_intensity = self._INTENSITY[0]
   self._device_type = "LIGHT"
   self._device_registration_flag = False
   self.client = mqtt.Client(self._device_id)
   self.client.on_connect = self._on_connect
   self.client.on_message = self._on_message
   self.client.on_disconnect = self._on_disconnect
   self.client.connect(HOST, PORT, keepalive=60)
   self.client.loop_start()
   self._register_device(self._device_id, self._room_type, self._device_type)
   self._switch_status = "OFF"

def _register_device(self, device_id, room_type, device_type):
   request = {"type": "register", "flag": "SYN", "device_id": device_id, "room_type": room_type,
              "device_type": device_type}
   topic_name = "home"
   publish.single(topic=topic_name, payload=json.dumps(request), hostname=HOST)

# Connect method to subscribe to various topics.
def _on_connect(self, client, userdata, flags, result_code):
   client.subscribe(self._device_id, 0)
   client.subscribe(self._device_type, 0)
   client.subscribe(self._room_type, 0)
   client.subscribe(self._room_type + "/" + self._device_type, 0)
   client.subscribe("all", 0)

# method to process the recieved messages and publish them on relevant topics
# this method can also be used to take the action based on received commands
def _on_message(self, client, userdata, msg):
   reqString = "Light Device - " + self._device_id + " : " + str(msg.payload)
   print(reqString)
   request = json.loads(msg.payload)

   if request['type'] == 'set':
       if request['flag'] == 'switch_state':
           self._set_switch_status(request['value'])
       if request['flag'] == 'light_intensity':
           self._set_light_intensity(request['value'])

       response = {"type": "set", "status": 0, "device_id": self._device_id}
       topic_name = "home"
       publish.single(topic=topic_name, payload=json.dumps(response), hostname=HOST)

   if request['type'] == 'status':
       self.get_status()

# Getting the current switch status of devices
def _get_switch_status(self):
   return self._switch_status

# Setting the the switch of devices
def _set_switch_status(self, switch_state):
   self._switch_status = switch_state

# Getting the light intensity for the devices
def _get_light_intensity(self):
   return self._light_intensity

# Setting the light intensity for devices
def _set_light_intensity(self, light_intensity):
   self._light_intensity = light_intensity

###########################LightDevice.py - End ######################


###########################EdgeServer.py - Start ######################

import json
import time
import paho.mqtt.client as mqtt
import paho.mqtt.publish as publish

HOST = "localhost"
PORT = 1883     
WAIT_TIME = 0.25  

class Edge_Server:

def _init_(self, instance_name, callBack):
   
   self._instance_id = instance_name
   self.client = mqtt.Client(self._instance_id)
   self.client.on_connect = self._on_connect
   self.client.on_message = self._on_message
   self.client.connect(HOST, PORT, keepalive=60)
   self.client.loop_start()
   self._registered_list = []
   self.callBack = callBack

# Terminating the MQTT broker and stopping the execution
def terminate(self):
   self.client.disconnect()
   self.client.loop_stop()

# Connect method to subscribe to various topics.     
def _on_connect(self, client, userdata, flags, result_code):
   client.subscribe("home/#", 0)
   
# method to process the recieved messages and publish them on relevant topics 
# this method can also be used to take the action based on received commands
def _on_message(self, client, userdata, msg):
   print("Edge server :" , msg.payload)
   response = json.loads(msg.payload)        
   if response['type'] == 'register':
       topic_name = response['device_id']
       response['flag']='ACK'
       self._registered_list.append(response['device_id'])
       publish.single(topic=topic_name, payload=json.dumps(response), hostname=HOST)
   
   if response['type'] == "set" and response['status'] == 0:
       topic_name = response['device_id']
       request = {"type": "status"}
       publish.single(topic=topic_name, payload=json.dumps(request), hostname=HOST)
       
   if response['type'] == "status":
       self.callBack(msg.payload)
       
# Returning the current registered list
def get_registered_device_list(self):
   return self._registered_list

# Getting the status for the connected devices
def get_status(self,topic_name):
   request = {"type": "status"}
   publish.single(topic=topic_name, payload=json.dumps(request), hostname=HOST)

# Controlling and performing the operations on the devices
# based on the request received
def set(self, topic_name, command, value):
   request = {"type": "set", "flag":command, "value":value }
   publish.single(topic=topic_name, payload=json.dumps(request), hostname=HOST)


###########################EdgeServer.py- End ######################

###########################ACDevice.py - Start######################
import json
import paho.mqtt.client as mqtt
import paho.mqtt.publish as publish

HOST = "localhost"
PORT = 1883

class AC_Device():

_MIN_TEMP = 18  
_MAX_TEMP = 32  

def _init_(self, device_id, room):
   self._device_id = device_id
   self._room_type = room
   self._temperature = 22
   self._device_type = "AC"
   self._device_registration_flag = False
   self.client = mqtt.Client(self._device_id)  
   self.client.on_connect = self._on_connect  
   self.client.on_message = self._on_message  
   self.client.on_disconnect = self._on_disconnect  
   self.client.connect(HOST, PORT, keepalive=60)  
   self.client.loop_start()  
   self._register_device(self._device_id, self._room_type, self._device_type)
   self._switch_status = "OFF"

# calling registration method to register the device
def _register_device(self, device_id, room_type, device_type):
   request = {"type":"register", "flag":"SYN", "device_id": device_id, "room_type": room_type, "device_type":device_type }
   topic_name = "home"
   publish.single(topic=topic_name, payload=json.dumps(request), hostname=HOST)

# Connect method to subscribe to various topics. 
def _on_connect(self, client, userdata, flags, result_code):
   client.subscribe(self._device_id, 0)
   client.subscribe(self._device_type, 0)
   client.subscribe(self._room_type, 0)
   client.subscribe(self._room_type+"/"+self._device_type, 0)
   client.subscribe("all", 0)

# method to process the recieved messages and publish them on relevant topics 
# this method can also be used to take the action based on received commands
def _on_message(self, client, userdata, msg): 
   reqString = "AC Device - " + self._device_id + " : " + str(msg.payload)
   print(reqString)
   request = json.loads(msg.payload)
   
   if request['type'] == 'set':
       if request['flag'] == 'switch_state':
           self._set_switch_status(request['value'])
       if request['flag'] == 'temperature':
           self._set_temperature(request['value'])
       
       response = {"type":"set", "status": 0, "device_id": self._device_id}
       topic_name = "home"
       publish.single(topic=topic_name, payload=json.dumps(response), hostname=HOST)
           
   if request['type'] == 'status':
       self.get_status()

# Getting the current switch status of devices 
def _get_switch_status(self):
   return self._switch_status

# Setting the the switch of devices
def _set_switch_status(self, switch_state):
   self._switch_status = switch_state

# Getting the temperature for the devices
def _get_temperature(self):
   return self._temperature        

# Setting up the temperature of the devices
def _set_temperature(self, temperature):
   self._temperature = temperature

###########################ACDevice.py - End ######################