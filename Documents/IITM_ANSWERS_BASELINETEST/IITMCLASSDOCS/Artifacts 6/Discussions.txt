Design Patterns
 - Standard Solutions that is recommended
   to be implemented for a Standard 
   Problem.
1. Creational Pattern
This is a category of design pattern 
recommended / implemented for 
Object Creation.
 - Factory, Abstract Factory, Prototye,
   Builder, Singleton

Singleton
 - This is a creational pattern where an
   Object of a given class is created only
   once.

Why?
 - Saving Memory (Instance Creation is Heavy)
 - Limit Instance Creation
usecase :
 - Loading a file from a folder.
 - Create "FileSystem" class.
 - ReadFolder, WriteToFolder, ReadFile,
   WriteFile, ListDirectories
Utility vs Singleton
 - Class with Static Methods ONLY.
FileSystem.ListDirectories("serverName")
  1. First connect to server
  2. DO the JOB.

fileSystem = FileSystem("serverName")
FileSystem.getInstance()
.ListDirectories("serverName")
  2. DO the JOB.


Method :- obj.method()
Static Method :- CLASS.method()

How?
 - Class Level Attribute mainitaing the
   object
 - Class Level Method attempting to create
   the object
 - Validations if object already created.
Static method in a class does not mean that
class is singleton instead needs to be 
investigated to check if Instance of that
class is created ONLY once.
===========================================
Prototype Pattern (clone / copy)
 - This is a creational design pattern where
   objects are duplicated / copied 
   (NOT created)

Why?
 - You don't know how to create the object,
   object creation is complex.
     - May be initialization of that class
       need to talk to 5 other modules.
 - You need the object of the class.
     - Actual Copy of the object.
 - You don't CARE about object creation
     - You don't own that module.

How to Copy Objects in OOPS
Shallow Copy
   A                 B
(0x100)           (0x200)
   10                20
A ShallowCopyTo B
   A                 B
(0x100)           (0x100) (0X200) 20
   10                10
    5                 5
    3                 3

Deep Copy
   A                 B
(0x100)           (0x200)
   10                20
A DeepCopyTo B
   A                 B
(0x100)           (0x200)
   10                10
    5                10
    5                 3

Real world examples
 - Catalog Management System
 - Letter Head of Companies format
 - GuestView, AdminView
   TheView -> GuestView = TheView.clone()
              AdminView = TheView.clone()
===========================================
Factory Pattern
 - This is a creational design pattern where
   object creation is abstracted / hidden. 
Why?
 - To Abstract or hide the implementation.
When?
 - When you have categories for any 
   functionalties
Real world examples
 - Password, oAuth, HMAC
auth = AuthenticationFactory.getInstance(PASSWORD)
auth.processAuthentication()
=========================================
Builder
This is a creational pattern where objects
are created using a builder class.
This pattern enables Immutability.
<Avoid setter and constructor initialization>

Why?
 - Without calling the constructor you can
   create objects using the attributes.
 - Builder is effective when you have a more
   attributes for a class.
When?
 - Model a DB Schema in the service
 - Brings Immutability for objects.
Immutability :- 
============================================
Factory and Abstract Factory
Factory hides object creation where as 
Abstract Factory hides Factory creation.


2. Structural

3. Behavioral
